# # –ù–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞: "–°–æ—Å–∏—Å–æ—á–Ω–∞—è –¥—É—ç–ª—å" (/duel @username)
# # –ö–æ–Ω—Ü–µ–ø—Ü–∏—è
# # –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ "—Å–æ—Å–∏—Å–æ—á–Ω—É—é –¥—É—ç–ª—å" ‚Äî –º–∏–Ω–∏-–∏–≥—Ä—É, –≥–¥–µ –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –≤ –º–µ—Ç–∫–æ—Å—Ç–∏ –∏–ª–∏ —É–¥–∞—á–µ.
# # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã, –∞ –≤ —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö ‚Äî "—Å–æ—Å–∏—Å–∫—É —Å 10 –±–∞–ª–ª–∞–º–∏" (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å).
# # –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–æ–≤—ã—Å–∏—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ.
# #
# # –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
# # –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å:
# # –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /duel @username, —É–∫–∞–∑—ã–≤–∞—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.
# # –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏–≥—Ä–µ –∏ –∏–º–µ—é—Ç –º–∏–Ω–∏–º—É–º 5 –±–∞–ª–ª–æ–≤ (—Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥—É—ç–ª—å).
# # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
# # –ñ–µ—Ä—Ç–≤–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" (–∏–ª–∏ /accept) –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ –¥—É—ç–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.
# # –ú–µ—Ö–∞–Ω–∏–∫–∞ –¥—É—ç–ª–∏:
# # –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ "–±—Ä–æ—Å–∞–µ—Ç —Å–æ—Å–∏—Å–∫—É" (–∏–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞).
# # –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ:
# # –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–µ, –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç.
# # –ï—Å–ª–∏ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã ‚Äî –Ω–∏—á—å—è, –∏ –æ–±–∞ —Ç–µ—Ä—è—é—Ç –ø–æ 2 –±–∞–ª–ª–∞ –∑–∞ "–Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å".
# # –®–∞–Ω—Å "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è" (10): –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç 10, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç "—Å–æ—Å–∏—Å–∫—É —Å 10 –±–∞–ª–ª–∞–º–∏" –∫–∞–∫ –±–æ–Ω—É—Å.
# # –ù–∞–≥—Ä–∞–¥—ã –∏ —à—Ç—Ä–∞—Ñ—ã:
# # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç 5 –±–∞–ª–ª–æ–≤ –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ + —Å–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å (1-5 –±–∞–ª–ª–æ–≤).
# # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ç–µ—Ä—è–µ—Ç 5 –±–∞–ª–ª–æ–≤.
# # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ (10): +10 –±–∞–ª–ª–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è "—Å–æ—Å–∏—Å–∫–∞").
# # –ù–∏—á—å—è: –æ–±–∞ —Ç–µ—Ä—è—é—Ç 2 –±–∞–ª–ª–∞.
# # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
# # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.
# # –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –¥—É—ç–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
# # –ú–µ–∂–¥—É –¥—É—ç–ª—è–º–∏ —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º ‚Äî –∫—É–ª–¥–∞—É–Ω 10 –º–∏–Ω—É—Ç.
#
# from aiogram import Bot, Router, F
# from aiogram.types import Message
# from aiogram.filters import Command
# from database.queries import (
#     get_user_by_id,
#     get_user_points,
#     update_user_points,
#     get_user_by_username,
#     reset_user_on_zero_points,
# )
# import random
# import asyncio
# import time
#
# from logger import logger
#
# duel_game_r = Router()
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π (chat_id: {challenger_id: {"opponent_id": int, "message_id": int}})
# active_duels = {}
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–æ–≤ (chat_id: {(challenger_id, opponent_id): timestamp})
# duel_cooldowns = {}
#
# # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# DUEL_COOLDOWN = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
#
# # –≠–º–æ–¥–∑–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
# THROW_EMOJI = "üå≠üí®"  # –ë—Ä–æ—Å–æ–∫ —Å–æ—Å–∏—Å–∫–∏
# CRIT_EMOJI = "üå≠‚ú®"  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
# HIT_EMOJI = "üí•"  # –û–±—ã—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
# MISS_EMOJI = "üòÖ"  # –ù–∏—á—å—è –∏–ª–∏ –ø—Ä–æ–º–∞—Ö
#
# # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—É—ç–ª–∏
# DUEL_CHALLENGE_MESSAGES = [
#     "@{challenger} –≤—ã–∑—ã–≤–∞–µ—Ç @{opponent} –Ω–∞ —Å–æ—Å–∏—Å–æ—á–Ω—É—é –¥—É—ç–ª—å! –û—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '/accept' –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥! üå≠",
#     "@{opponent}, @{challenger} –±—Ä–æ—Å–∏–ª —Ç–µ–±–µ —Å–æ—Å–∏—Å–æ—á–Ω—ã–π –≤—ã–∑–æ–≤! –ü—Ä–∏–º–µ—à—å? ('–î–∞' –∏–ª–∏ '/accept', 30 —Å–µ–∫) üå≠",
#     "–°–æ—Å–∏—Å–æ—á–Ω–∞—è –¥—É—ç–ª—å! @{challenger} –ø—Ä–æ—Ç–∏–≤ @{opponent}! –°–æ–≥–ª–∞—à–∞–π—Å—è ('–î–∞' –∏–ª–∏ '/accept') –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥! üå≠",
# ]
#
# DUEL_ACCEPTED_MESSAGES = [
#     "–î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! @{challenger} –ø—Ä–æ—Ç–∏–≤ @{opponent}! –ö—Ç–æ –º–µ—Ç—á–µ –±—Ä–æ—Å–∏—Ç —Å–æ—Å–∏—Å–∫—É? üéØ",
#     "@{challenger} –∏ @{opponent} –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–æ—Å–∏—Å–æ—á–Ω—É—é —Å—Ö–≤–∞—Ç–∫—É! –ì–æ—Ç–æ–≤—å—Ç–µ —Å–æ—Å–∏—Å–∫–∏! üéØ",
#     "–ë–∏—Ç–≤–∞ —Å–æ—Å–∏—Å–æ–∫! @{challenger} vs @{opponent}! –ü—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç –ª—É—á—à–∏–π! üéØ",
# ]
#
# DUEL_THROW_MESSAGES = [
#     "{throw_emoji} @{player} –±—Ä–æ—Å–∞–µ—Ç —Å–æ—Å–∏—Å–∫—É... –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}!",
#     "{throw_emoji} @{player} —à–≤—ã—Ä—è–µ—Ç —Å–æ—Å–∏—Å–∫—É —Å —Ä–∞–∑–º–∞—Ö–æ–º... {score}!",
#     "{throw_emoji} –°–æ—Å–∏—Å–∫–∞ –æ—Ç @{player} –ª–µ—Ç–∏—Ç –≤ —Ü–µ–ª—å... {score}!",
# ]
#
# DUEL_RESULT_MESSAGES = [
#     "{hit_emoji} @{winner} ({winner_score}) —É–¥–µ–ª–∞–ª @{loser} ({loser_score})! –ü–æ–±–µ–¥–∞ @{winner}! +{bonus} –±–∞–ª–ª–æ–≤ –∏ 5 –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ!",
#     "{hit_emoji} @{winner} ({winner_score}) –º–µ—Ç—á–µ @{loser} ({loser_score})! @{winner} –ø–æ–ª—É—á–∞–µ—Ç 5 –±–∞–ª–ª–æ–≤ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –±–æ–Ω—É—Å {bonus}!",
#     "{hit_emoji} –°–æ—Å–∏—Å–∫–∞ @{winner} ({winner_score}) —Ä–∞–∑–º–∞–∑–∞–ª–∞ @{loser} ({loser_score})! +5 –±–∞–ª–ª–æ–≤ –∏ {bonus} –±–æ–Ω—É—Å–∞!",
# ]
#
# DUEL_CRIT_MESSAGES = [
#     "{crit_emoji} @{winner} –≤—ã–∫–∏–Ω—É–ª 10 ‚Äî –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï! –°–æ—Å–∏—Å–∫–∞ —Å 10 –±–∞–ª–ª–∞–º–∏ –∏ 5 –æ—Ç @{loser} ({loser_score}) –≤ –∫–∞—Ä–º–∞–Ω–µ @{winner}!",
#     "{crit_emoji} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! @{winner} (10) —É–Ω–∏—á—Ç–æ–∂–∏–ª @{loser} ({loser_score}) –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–∏—Å–∫—É —Å 10 –±–∞–ª–ª–∞–º–∏ + 5 –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ!",
# ]
#
# DUEL_TIE_MESSAGES = [
#     "{miss_emoji} @{challenger} ({challenger_score}) –∏ @{opponent} ({opponent_score}) –æ–±–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å! –ù–∏—á—å—è, –æ–±–∞ —Ç–µ—Ä—è—é—Ç –ø–æ 2 –±–∞–ª–ª–∞ –∑–∞ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å!",
#     "{miss_emoji} –ù–∏—á—å—è! @{challenger} –∏ @{opponent} –ø–æ–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({challenger_score}) ‚Äî –º–∏–Ω—É—Å 2 –±–∞–ª–ª–∞ –∫–∞–∂–¥–æ–º—É!",
# ]
#
# DUEL_TIMEOUT_MESSAGES = [
#     "@{opponent} —Å—Ç—Ä—É—Å–∏–ª –∏–ª–∏ –∑–∞—Å–Ω—É–ª! –î—É—ç–ª—å —Å @{challenger} –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. üå≠",
#     "–í—Ä–µ–º—è –≤—ã—à–ª–æ! @{opponent} –Ω–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ @{challenger}. –î—É—ç–ª—å —Å–æ—Ä–≤–∞–ª–∞—Å—å! üå≠",
# ]
#
# DUEL_COOLDOWN_MESSAGES = [
#     "@{challenger}, —Ç—ã —É–∂–µ –¥—Ä–∞–ª—Å—è —Å @{opponent}! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–æ—Å–∏—Å–∫–∏ –æ—Å—Ç—ã–≤–∞—é—Ç! ‚è≥",
#     "–ú–µ–∂–¥—É –¥—É—ç–ª—è–º–∏ —Å @{opponent} –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å, @{challenger}! ‚è≥",
#     "@{challenger}, –¥–∞–π @{opponent} –æ—Ç–¥—ã—à–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—à–ª–æ–π —Å–æ—Å–∏—Å–æ—á–Ω–æ–π –±–∏—Ç–≤—ã! ‚è≥",
# ]
#
#
# @duel_game_r.message(Command("duel"))
# async def duel_challenge_handler(message: Message, bot: Bot):
#     chat_id = message.chat.id
#     challenger = message.from_user
#     logger.debug(f"–í—ã–∑–æ–≤ –¥—É—ç–ª–∏ –æ—Ç {challenger.username} –≤ —á–∞—Ç–µ {chat_id}")
#
#     if message.chat.type == "private":
#         await message.reply("–î—É—ç–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! üå≠")
#         return
#
#     if not message.text.split(maxsplit=1)[1:]:
#         await message.reply("–£–∫–∞–∂–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞! –ü—Ä–∏–º–µ—Ä: /duel @username")
#         return
#
#     opponent_username = message.text.split(maxsplit=1)[1].strip()
#     if not opponent_username.startswith("@"):
#         await message.reply("–Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @! –ü—Ä–∏–º–µ—Ä: /duel @username")
#         return
#     opponent_username = opponent_username[1:]
#
#     challenger_data = await get_user_by_id(challenger.id, chat_id)
#     if not challenger_data or not challenger_data.in_game:
#         await message.reply("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏ –≤ –∏–≥—Ä—É.")
#         return
#
#     opponent_data = await get_user_by_username(chat_id, opponent_username)
#     if not opponent_data or not opponent_data.in_game:
#         await message.reply(f"@{opponent_username} –Ω–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#         return
#
#     if opponent_data.telegram_id == challenger.id:
#         await message.reply("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–∞–Ω–Ω–æ! üå≠")
#         return
#
#     if chat_id in active_duels and (
#         challenger.id in active_duels[chat_id]
#         or opponent_data.telegram_id
#         in [d["opponent_id"] for d in active_duels[chat_id].values()]
#     ):
#         await message.reply("–û–¥–∏–Ω –∏–∑ –≤–∞—Å —É–∂–µ –≤ –¥—É—ç–ª–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
#         return
#
#     duel_pair = tuple(sorted([challenger.id, opponent_data.telegram_id]))
#     if chat_id in duel_cooldowns and duel_pair in duel_cooldowns[chat_id]:
#         last_duel_time = duel_cooldowns[chat_id][duel_pair]
#         if time.time() - last_duel_time < DUEL_COOLDOWN:
#             await message.reply(
#                 random.choice(DUEL_COOLDOWN_MESSAGES).format(
#                     challenger=challenger.username, opponent=opponent_username
#                 )
#             )
#             return
#
#     challenger_points = await get_user_points(challenger.id, chat_id)
#     opponent_points = await get_user_points(opponent_data.telegram_id, chat_id)
#     if challenger_points < 5 or opponent_points < 5:
#         await message.reply("–î–ª—è –¥—É—ç–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –±–∞–ª–ª–æ–≤ —É –∫–∞–∂–¥–æ–≥–æ!")
#         return
#
#     if chat_id not in active_duels:
#         active_duels[chat_id] = {}
#     challenge_message = await message.reply(
#         random.choice(DUEL_CHALLENGE_MESSAGES).format(
#             challenger=challenger.username, opponent=opponent_username
#         )
#     )
#     active_duels[chat_id][challenger.id] = {
#         "opponent_id": opponent_data.telegram_id,
#         "message_id": challenge_message.message_id,
#     }
#     logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤: {active_duels[chat_id][challenger.id]}")
#
#     await asyncio.sleep(30)
#     if chat_id in active_duels and challenger.id in active_duels[chat_id]:
#         await bot.send_message(
#             chat_id,
#             random.choice(DUEL_TIMEOUT_MESSAGES).format(
#                 challenger=challenger.username, opponent=opponent_username
#             ),
#         )
#         del active_duels[chat_id][challenger.id]
#         if not active_duels[chat_id]:
#             del active_duels[chat_id]
#
#
# @duel_game_r.message(F.text.in_(["–î–∞", "/accept"]))
# async def duel_accept_handler(message: Message, bot: Bot):
#     chat_id = message.chat.id
#     opponent = message.from_user
#     logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ: '{message.text}' –æ—Ç {opponent.username}")
#
#     if not message.reply_to_message:
#         logger.debug("–ù–µ —Ä–µ–ø–ª–∞–π")
#         return
#
#     if chat_id not in active_duels:
#         logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π")
#         return
#
#     challenger_id = next(
#         (
#             cid
#             for cid, data in active_duels[chat_id].items()
#             if data["opponent_id"] == opponent.id
#         ),
#         None,
#     )
#     if not challenger_id:
#         logger.debug(f"–ù–µ—Ç –≤—ã–∑–æ–≤–∞ –¥–ª—è {opponent.username}")
#         return
#
#     expected_message_id = active_duels[chat_id][challenger_id]["message_id"]
#     if message.reply_to_message.message_id != expected_message_id:
#         logger.debug(
#             f"–†–µ–ø–ª–∞–π –Ω–∞ {message.reply_to_message.message_id}, –æ–∂–∏–¥–∞–ª—Å—è {expected_message_id}"
#         )
#         return
#
#     logger.debug(f"–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞: {opponent.username} vs {challenger_id}")
#     challenger_data = await get_user_by_id(challenger_id, chat_id)
#     opponent_data = await get_user_by_id(opponent.id, chat_id)
#     if not challenger_data or not opponent_data:
#         await message.reply("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#         return
#
#     await message.reply(
#         random.choice(DUEL_ACCEPTED_MESSAGES).format(
#             challenger=challenger_data.username, opponent=opponent_data.username
#         )
#     )
#
#     del active_duels[chat_id][challenger_id]
#     if not active_duels[chat_id]:
#         del active_duels[chat_id]
#
#     challenger_score = random.randint(1, 10)
#     await bot.send_message(
#         chat_id,
#         random.choice(DUEL_THROW_MESSAGES).format(
#             throw_emoji=THROW_EMOJI,
#             player=challenger_data.username,
#             score=challenger_score,
#         ),
#     )
#     await asyncio.sleep(1)
#
#     opponent_score = random.randint(1, 10)
#     await bot.send_message(
#         chat_id,
#         random.choice(DUEL_THROW_MESSAGES).format(
#             throw_emoji=THROW_EMOJI, player=opponent_data.username, score=opponent_score
#         ),
#     )
#     await asyncio.sleep(1)
#
#     duel_pair = tuple(sorted([challenger_id, opponent.id]))
#     if chat_id not in duel_cooldowns:
#         duel_cooldowns[chat_id] = {}
#     duel_cooldowns[chat_id][duel_pair] = time.time()
#
#     if challenger_score > opponent_score:
#         winner = challenger_data
#         loser = opponent_data
#         winner_score = challenger_score
#         loser_score = opponent_score
#         bonus = random.randint(1, 5)
#         if winner_score == 10:
#             bonus += 10
#             message_text = random.choice(DUEL_CRIT_MESSAGES).format(
#                 crit_emoji=CRIT_EMOJI,
#                 winner=winner.username,
#                 loser=loser.username,
#                 loser_score=loser_score,
#             )
#         else:
#             message_text = random.choice(DUEL_RESULT_MESSAGES).format(
#                 hit_emoji=HIT_EMOJI,
#                 winner=winner.username,
#                 loser=loser.username,
#                 winner_score=winner_score,
#                 loser_score=loser_score,
#                 bonus=bonus,
#             )
#         await update_user_points(winner.telegram_id, chat_id, 5 + bonus)
#         await update_user_points(loser.telegram_id, chat_id, -5)
#
#     elif opponent_score > challenger_score:
#         winner = opponent_data
#         loser = challenger_data
#         winner_score = opponent_score
#         loser_score = challenger_score
#         bonus = random.randint(1, 5)
#         if winner_score == 10:
#             bonus += 10
#             message_text = random.choice(DUEL_CRIT_MESSAGES).format(
#                 crit_emoji=CRIT_EMOJI,
#                 winner=winner.username,
#                 loser=loser.username,
#                 loser_score=loser_score,
#             )
#         else:
#             message_text = random.choice(DUEL_RESULT_MESSAGES).format(
#                 hit_emoji=HIT_EMOJI,
#                 winner=winner.username,
#                 loser=loser.username,
#                 winner_score=winner_score,
#                 loser_score=loser_score,
#                 bonus=bonus,
#             )
#         await update_user_points(winner.telegram_id, chat_id, 5 + bonus)
#         await update_user_points(loser.telegram_id, chat_id, -5)
#
#     else:
#         message_text = random.choice(DUEL_TIE_MESSAGES).format(
#             miss_emoji=MISS_EMOJI,
#             challenger=challenger_data.username,
#             opponent=opponent_data.username,
#             challenger_score=challenger_score,
#             opponent_score=opponent_score,
#         )
#         await update_user_points(challenger_id, chat_id, -2)
#         await update_user_points(opponent.id, chat_id, -2)
#
#     await bot.send_message(chat_id, message_text)
#
#     new_challenger_points = await get_user_points(challenger_id, chat_id)
#     new_opponent_points = await get_user_points(opponent.id, chat_id)
#     if new_challenger_points <= 0:
#         await reset_user_on_zero_points(challenger_id, chat_id)
#         await bot.send_message(
#             chat_id, f"@{challenger_data.username} –æ–±–Ω—É–ª–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É—ç–ª–∏! {MISS_EMOJI}"
#         )
#     if new_opponent_points <= 0:
#         await reset_user_on_zero_points(opponent.id, chat_id)
#         await bot.send_message(
#             chat_id, f"@{opponent_data.username} –æ–±–Ω—É–ª–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É—ç–ª–∏! {MISS_EMOJI}"
#         )
#
#
# # from aiogram import Bot, Router
# # from aiogram.types import Message, ChatType
# # from aiogram.filters import Command, Text
# # from database.queries import (
# #     get_user_by_id,
# #     get_user_points,
# #     update_user_points,
# #     get_user_by_username,
# #     reset_user_on_zero_points,
# # )
# # from logger import logger
# # import random
# # import asyncio
# # import time
# # import redis
# # import os
# # import json
# #
# # duel_game_r = Router()
# #
# # # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
# # REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
# # REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
# # redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
# #
# # # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π (chat_id: {challenger_id: opponent_id})
# # active_duels = {}
# #
# # # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# # DUEL_COOLDOWN = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
# #
# # # –≠–º–æ–¥–∑–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
# # THROW_EMOJI = "üå≠üí®"  # –ë—Ä–æ—Å–æ–∫ —Å–æ—Å–∏—Å–∫–∏
# # CRIT_EMOJI = "üå≠‚ú®"   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
# # HIT_EMOJI = "üí•"      # –û–±—ã—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
# # MISS_EMOJI = "üòÖ"     # –ù–∏—á—å—è –∏–ª–∏ –ø—Ä–æ–º–∞—Ö
# #
# # # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—É—ç–ª–∏
# # DUEL_CHALLENGE_MESSAGES = [
# #     "@{challenger} –≤—ã–∑—ã–≤–∞–µ—Ç @{opponent} –Ω–∞ —Å–æ—Å–∏—Å–æ—á–Ω—É—é –¥—É—ç–ª—å! –û—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '/accept' –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥! üå≠",
# #     "@{opponent}, @{challenger} –±—Ä–æ—Å–∏–ª —Ç–µ–±–µ —Å–æ—Å–∏—Å–æ—á–Ω—ã–π –≤—ã–∑–æ–≤! –ü—Ä–∏–º–µ—à—å? ('–î–∞' –∏–ª–∏ '/accept', 30 —Å–µ–∫) üå≠",
# #     "–°–æ—Å–∏—Å–æ—á–Ω–∞—è –¥—É—ç–ª—å! @{challenger} –ø—Ä–æ—Ç–∏–≤ @{opponent}! –°–æ–≥–ª–∞—à–∞–π—Å—è ('–î–∞' –∏–ª–∏ '/accept') –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥! üå≠",
# # ]
# #
# # DUEL_ACCEPTED_MESSAGES = [
# #     "–î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! @{challenger} –ø—Ä–æ—Ç–∏–≤ @{opponent}! –ö—Ç–æ –º–µ—Ç—á–µ –±—Ä–æ—Å–∏—Ç —Å–æ—Å–∏—Å–∫—É? üéØ",
# #     "@{challenger} –∏ @{opponent} –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–æ—Å–∏—Å–æ—á–Ω—É—é —Å—Ö–≤–∞—Ç–∫—É! –ì–æ—Ç–æ–≤—å—Ç–µ —Å–æ—Å–∏—Å–∫–∏! üéØ",
# #     "–ë–∏—Ç–≤–∞ —Å–æ—Å–∏—Å–æ–∫! @{challenger} vs @{opponent}! –ü—É—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç –ª—É—á—à–∏–π! üéØ",
# # ]
# #
# # DUEL_THROW_MESSAGES = [
# #     "{throw_emoji} @{player} –±—Ä–æ—Å–∞–µ—Ç —Å–æ—Å–∏—Å–∫—É... –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}!",
# #     "{throw_emoji} @{player} —à–≤—ã—Ä—è–µ—Ç —Å–æ—Å–∏—Å–∫—É —Å —Ä–∞–∑–º–∞—Ö–æ–º... {score}!",
# #     "{throw_emoji} –°–æ—Å–∏—Å–∫–∞ –æ—Ç @{player} –ª–µ—Ç–∏—Ç –≤ —Ü–µ–ª—å... {score}!",
# # ]
# #
# # DUEL_RESULT_MESSAGES = [
# #     "{hit_emoji} @{winner} ({winner_score}) —É–¥–µ–ª–∞–ª @{loser} ({loser_score})! –ü–æ–±–µ–¥–∞ @{winner}! +{bonus} –±–∞–ª–ª–æ–≤ –∏ 5 –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ!",
# #     "{hit_emoji} @{winner} ({winner_score}) –º–µ—Ç—á–µ @{loser} ({loser_score})! @{winner} –ø–æ–ª—É—á–∞–µ—Ç 5 –±–∞–ª–ª–æ–≤ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –±–æ–Ω—É—Å {bonus}!",
# #     "{hit_emoji} –°–æ—Å–∏—Å–∫–∞ @{winner} ({winner_score}) —Ä–∞–∑–º–∞–∑–∞–ª–∞ @{loser} ({loser_score})! +5 –±–∞–ª–ª–æ–≤ –∏ {bonus} –±–æ–Ω—É—Å–∞!",
# # ]
# #
# # DUEL_CRIT_MESSAGES = [
# #     "{crit_emoji} @{winner} –≤—ã–∫–∏–Ω—É–ª 10 ‚Äî –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï! –°–æ—Å–∏—Å–∫–∞ —Å 10 –±–∞–ª–ª–∞–º–∏ –∏ 5 –æ—Ç @{loser} ({loser_score}) –≤ –∫–∞—Ä–º–∞–Ω–µ @{winner}!",
# #     "{crit_emoji} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! @{winner} (10) —É–Ω–∏—á—Ç–æ–∂–∏–ª @{loser} ({loser_score}) –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–∏—Å–∫—É —Å 10 –±–∞–ª–ª–∞–º–∏ + 5 –æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ!",
# # ]
# #
# # DUEL_TIE_MESSAGES = [
# #     "{miss_emoji} @{challenger} ({challenger_score}) –∏ @{opponent} ({opponent_score}) –æ–±–∞ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å! –ù–∏—á—å—è, –æ–±–∞ —Ç–µ—Ä—è—é—Ç –ø–æ 2 –±–∞–ª–ª–∞ –∑–∞ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å!",
# #     "{miss_emoji} –ù–∏—á—å—è! @{challenger} –∏ @{opponent} –ø–æ–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({challenger_score}) ‚Äî –º–∏–Ω—É—Å 2 –±–∞–ª–ª–∞ –∫–∞–∂–¥–æ–º—É!",
# # ]
# #
# # DUEL_TIMEOUT_MESSAGES = [
# #     "@{opponent} —Å—Ç—Ä—É—Å–∏–ª –∏–ª–∏ –∑–∞—Å–Ω—É–ª! –î—É—ç–ª—å —Å @{challenger} –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. üå≠",
# #     "–í—Ä–µ–º—è –≤—ã—à–ª–æ! @{opponent} –Ω–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ @{challenger}. –î—É—ç–ª—å —Å–æ—Ä–≤–∞–ª–∞—Å—å! üå≠",
# # ]
# #
# # DUEL_COOLDOWN_MESSAGES = [
# #     "@{challenger}, —Ç—ã —É–∂–µ –¥—Ä–∞–ª—Å—è —Å @{opponent}! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–æ—Å–∏—Å–∫–∏ –æ—Å—Ç—ã–≤–∞—é—Ç! ‚è≥",
# #     "–ú–µ–∂–¥—É –¥—É—ç–ª—è–º–∏ —Å @{opponent} –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å, @{challenger}! ‚è≥",
# #     "@{challenger}, –¥–∞–π @{opponent} –æ—Ç–¥—ã—à–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—à–ª–æ–π —Å–æ—Å–∏—Å–æ—á–Ω–æ–π –±–∏—Ç–≤—ã! ‚è≥",
# # ]
# #
# #
# # @duel_game_r.message(Command("duel"))
# # async def duel_challenge_handler(message: Message, bot: Bot):
# #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /duel @username: –≤—ã–∑–æ–≤ –Ω–∞ —Å–æ—Å–∏—Å–æ—á–Ω—É—é –¥—É—ç–ª—å."""
# #     if message.chat.type in [ChatType.PRIVATE]:
# #         await message.reply("–î—É—ç–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! üå≠")
# #         return
# #
# #     chat_id = message.chat.id
# #     challenger = message.from_user
# #
# #     if not message.text.split(maxsplit=1)[1:]:
# #         await message.reply("–£–∫–∞–∂–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞! –ü—Ä–∏–º–µ—Ä: /duel @username")
# #         return
# #
# #     opponent_username = message.text.split(maxsplit=1)[1].strip()
# #     if not opponent_username.startswith("@"):
# #         await message.reply("–Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @! –ü—Ä–∏–º–µ—Ä: /duel @username")
# #         return
# #     opponent_username = opponent_username[1:]
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
# #     challenger_data = await get_user_by_id(challenger.id, chat_id)
# #     if not challenger_data or not challenger_data.in_game:
# #         await message.reply("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏ –≤ –∏–≥—Ä—É.")
# #         return
# #
# #     opponent_data = await get_user_by_username(chat_id, opponent_username)
# #     if not opponent_data or not opponent_data.in_game:
# #         await message.reply(f"@{opponent_username} –Ω–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
# #         return
# #
# #     if opponent_data.telegram_id == challenger.id:
# #         await message.reply("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–∞–Ω–Ω–æ! üå≠")
# #         return
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
# #     if chat_id in active_duels and (challenger.id in active_duels[chat_id] or opponent_data.telegram_id in active_duels[chat_id]):
# #         await message.reply("–û–¥–∏–Ω –∏–∑ –≤–∞—Å —É–∂–µ –≤ –¥—É—ç–ª–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
# #         return
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –≤ Redis
# #     duel_key = f"duel:cooldown:{chat_id}:{sorted([challenger.id, opponent_data.telegram_id])}"
# #     last_duel_time = redis_client.get(duel_key)
# #     if last_duel_time and (time.time() - float(last_duel_time) < DUEL_COOLDOWN):
# #         await message.reply(
# #             random.choice(DUEL_COOLDOWN_MESSAGES).format(
# #                 challenger=challenger.username,
# #                 opponent=opponent_username
# #             )
# #         )
# #         return
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤
# #     challenger_points = await get_user_points(challenger.id, chat_id)
# #     opponent_points = await get_user_points(opponent_data.telegram_id, chat_id)
# #     if challenger_points < 5 or opponent_points < 5:
# #         await message.reply("–î–ª—è –¥—É—ç–ª–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –±–∞–ª–ª–æ–≤ —É –∫–∞–∂–¥–æ–≥–æ!")
# #         return
# #
# #     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥—É—ç–ª—å
# #     if chat_id not in active_duels:
# #         active_duels[chat_id] = {}
# #     active_duels[chat_id][challenger.id] = opponent_data.telegram_id
# #
# #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤
# #     await message.reply(
# #         random.choice(DUEL_CHALLENGE_MESSAGES).format(
# #             challenger=challenger.username,
# #             opponent=opponent_username
# #         )
# #     )
# #
# #     # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ 30 —Å–µ–∫—É–Ω–¥
# #     await asyncio.sleep(30)
# #     if chat_id in active_duels and challenger.id in active_duels[chat_id]:
# #         await bot.send_message(
# #             chat_id,
# #             random.choice(DUEL_TIMEOUT_MESSAGES).format(
# #                 challenger=challenger.username,
# #                 opponent=opponent_username
# #             )
# #         )
# #         del active_duels[chat_id][challenger.id]
# #         if not active_duels[chat_id]:
# #             del active_duels[chat_id]
# #
# #
# # @duel_game_r.message(Text(text=["–î–∞", "/accept"], ignore_case=True))
# # async def duel_accept_handler(message: Message, bot: Bot):
# #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏."""
# #     chat_id = message.chat.id
# #     opponent = message.from_user
# #
# #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# #     if chat_id not in active_duels or not any(opponent.id == opp_id for opp_id in active_duels[chat_id].values()):
# #         await message.reply("–¢–µ–±—è –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å! üå≠")
# #         return
# #
# #     # –ù–∞—Ö–æ–¥–∏–º –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
# #     challenger_id = next(
# #         cid for cid, oid in active_duels[chat_id].items() if oid == opponent.id
# #     )
# #     challenger_data = await get_user_by_id(challenger_id, chat_id)
# #     opponent_data = await get_user_by_id(opponent.id, chat_id)
# #
# #     # –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
# #     await message.reply(
# #         random.choice(DUEL_ACCEPTED_MESSAGES).format(
# #             challenger=challenger_data.username,
# #             opponent=opponent_data.username
# #         )
# #     )
# #
# #     # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
# #     del active_duels[chat_id][challenger_id]
# #     if not active_duels[chat_id]:
# #         del active_duels[chat_id]
# #
# #     # –ë—Ä–æ—Å–∫–∏ —Å–æ—Å–∏—Å–æ–∫ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
# #     challenger_score = random.randint(1, 10)
# #     await bot.send_message(
# #         chat_id,
# #         random.choice(DUEL_THROW_MESSAGES).format(
# #             throw_emoji=THROW_EMOJI,
# #             player=challenger_data.username,
# #             score=challenger_score
# #         )
# #     )
# #     await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
# #
# #     opponent_score = random.randint(1, 10)
# #     await bot.send_message(
# #         chat_id,
# #         random.choice(DUEL_THROW_MESSAGES).format(
# #             throw_emoji=THROW_EMOJI,
# #             player=opponent_data.username,
# #             score=opponent_score
# #         )
# #     )
# #     await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
# #
# #     # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏
# #     duel_key = f"duel:cooldown:{chat_id}:{sorted([challenger_id, opponent.id])}"
# #     redis_client.setex(duel_key, DUEL_COOLDOWN, time.time())  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –≤ Redis
# #
# #     if challenger_score > opponent_score:
# #         winner = challenger_data
# #         loser = opponent_data
# #         winner_score = challenger_score
# #         loser_score = opponent_score
# #         bonus = random.randint(1, 5)
# #         if winner_score == 10:
# #             bonus += 10  # –°–æ—Å–∏—Å–∫–∞ —Å 10 –±–∞–ª–ª–∞–º–∏
# #             message_text = random.choice(DUEL_CRIT_MESSAGES).format(
# #                 crit_emoji=CRIT_EMOJI,
# #                 winner=winner.username,
# #                 loser=loser.username,
# #                 loser_score=loser_score
# #             )
# #         else:
# #             message_text = random.choice(DUEL_RESULT_MESSAGES).format(
# #                 hit_emoji=HIT_EMOJI,
# #                 winner=winner.username,
# #                 loser=loser.username,
# #                 winner_score=winner_score,
# #                 loser_score=loser_score,
# #                 bonus=bonus
# #             )
# #         await update_user_points(winner.telegram_id, chat_id, 5 + bonus)
# #         await update_user_points(loser.telegram_id, chat_id, -5)
# #
# #     elif opponent_score > challenger_score:
# #         winner = opponent_data
# #         loser = challenger_data
# #         winner_score = opponent_score
# #         loser_score = challenger_score
# #         bonus = random.randint(1, 5)
# #         if winner_score == 10:
# #             bonus += 10  # –°–æ—Å–∏—Å–∫–∞ —Å 10 –±–∞–ª–ª–∞–º–∏
# #             message_text = random.choice(DUEL_CRIT_MESSAGES).format(
# #                 crit_emoji=CRIT_EMOJI,
# #                 winner=winner.username,
# #                 loser=loser.username,
# #                 loser_score=loser_score
# #             )
# #         else:
# #             message_text = random.choice(DUEL_RESULT_MESSAGES).format(
# #                 hit_emoji=HIT_EMOJI,
# #                 winner=winner.username,
# #                 loser=loser.username,
# #                 winner_score=winner_score,
# #                 loser_score=loser_score,
# #                 bonus=bonus
# #             )
# #         await update_user_points(winner.telegram_id, chat_id, 5 + bonus)
# #         await update_user_points(loser.telegram_id, chat_id, -5)
# #
# #     else:  # –ù–∏—á—å—è
# #         message_text = random.choice(DUEL_TIE_MESSAGES).format(
# #             miss_emoji=MISS_EMOJI,
# #             challenger=challenger_data.username,
# #             opponent=opponent_data.username,
# #             challenger_score=challenger_score,
# #             opponent_score=opponent_score
# #         )
# #         await update_user_points(challenger_id, chat_id, -2)
# #         await update_user_points(opponent.id, chat_id, -2)
# #
# #     await bot.send_message(chat_id, message_text)
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
# #     new_challenger_points = await get_user_points(challenger_id, chat_id)
# #     new_opponent_points = await get_user_points(opponent.id, chat_id)
# #     if new_challenger_points <= 0:
# #         await reset_user_on_zero_points(challenger_id, chat_id)
# #         await bot.send_message(chat_id, f"@{challenger_data.username} –æ–±–Ω—É–ª–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É—ç–ª–∏! {MISS_EMOJI}")
# #     if new_opponent_points <= 0:
# #         await reset_user_on_zero_points(opponent.id, chat_id)
# #         await bot.send_message(chat_id, f"@{opponent_data.username} –æ–±–Ω—É–ª–∏–ª—Å—è –ø–æ—Å–ª–µ –¥—É—ç–ª–∏! {MISS_EMOJI}")
