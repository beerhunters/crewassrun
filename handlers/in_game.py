import random
import re

from aiogram import types, Router
from aiogram.filters import Command

from buns_data import IN_GAME_TEXT
from database.queries import (
    get_user_by_id,
    add_user_to_game,
    add_user,
    # get_top_users_by_repetitions,
    get_top_buns_with_users,
    get_user_buns_stats,
)

in_game_r = Router()


@in_game_r.message(Command(commands="play"))
async def in_game_handler(message: types.Message):
    from_user = message.from_user
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∏—á–Ω—ã–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if not message.from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    user_id = from_user.id
    user = await get_user_by_id(
        user_id, chat_id
    )  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–≤–µ—Ä–∏–º, –≤ –∏–≥—Ä–µ –ª–∏ –æ–Ω
        if user.in_game:  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤ User –¥–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç in_game
            await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! üéÆ")
        else:
            # –ï—Å–ª–∏ –Ω–µ –≤ –∏–≥—Ä–µ, –¥–æ–±–∞–≤–∏–º –≤ –∏–≥—Ä—É
            await add_user_to_game(user_id)
            text = random.choice(IN_GAME_TEXT).format(
                user=(
                    f"{from_user.username}"
                    if from_user.username
                    else from_user.full_name
                )
            )
            await message.reply(text)
            # await message.reply(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ, {user.username}! üéâ")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await add_user(
            user_id=from_user.id,
            username=from_user.username,
            full_name=from_user.full_name,
            chat_id=chat_id,
        )
        text = random.choice(IN_GAME_TEXT).format(
            user=f"{from_user.username}" if from_user.username else from_user.full_name
        )
        await message.reply(text)
        # await message.reply(
        #     f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ, {from_user.username}! üéâ"
        # )


# @in_game_r.message(Command(commands="stats"))
# async def stats_handler(message: types.Message):
#     chat_id = message.chat.id  # –£—á–∏—Ç—ã–≤–∞–µ–º ID —á–∞—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∏—á–Ω—ã–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     if message.chat.type == "private":
#         await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
#         return
#
#     top_buns = await get_top_buns_with_users(chat_id=chat_id)
#
#     if not top_buns:
#         await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä")
#         return
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#     stats_text = "**üèÜ –¢–æ–ø-10 –±—É–ª–æ—á–µ–∫ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:**\n\n"
#     for i, item in enumerate(top_buns, start=1):
#         bun = item["bun"]
#         users = item["users"]
#         stats_text += f"{i}. {bun} - {', '.join(users)} üî•\n"
#
#     await message.reply(stats_text, parse_mode="Markdown")
async def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown v2, –≤–∫–ª—é—á–∞—è –¥–µ—Ñ–∏—Å."""
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"  # –î–æ–±–∞–≤–ª—è–µ–º \ –≤ —Å–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return re.sub(r"([" + re.escape(escape_chars) + r"])", r"\\\1", text)


# @in_game_r.message(Command(commands="stats"))
# async def stats_handler(message: types.Message):
#     chat_id = message.chat.id
#
#     if message.chat.type == "private":
#         await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
#         return
#
#     top_buns = await get_top_buns_with_users(chat_id=chat_id)
#
#     if not top_buns:
#         await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä")
#         return
#
#     # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
#     stats_text = "**üèÜ –¢–æ–ø-10 –±—É–ª–æ—á–µ–∫ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:**\n\n"
#     for i, item in enumerate(top_buns, start=1):
#         bun = await escape_markdown(item["bun"])  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –±—É–ª–æ—á–∫—É
#         users = [
#             await escape_markdown(user) for user in item["users"]
#         ]  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
#         stats_text += f"{i}. {bun} - {', '.join(users)} üî•\n"
#
#     await message.reply(stats_text, parse_mode="MarkdownV2")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2
@in_game_r.message(Command(commands="stats"))
async def stats_handler(message: types.Message):
    chat_id = message.chat.id

    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return

    top_buns = await get_top_buns_with_users(chat_id=chat_id)

    if not top_buns:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä")
        return

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    stats_text = "*üèÜ –¢–æ–ø\\-10 –±—É–ª–æ—á–µ–∫ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\\:*\n\n"
    for i, item in enumerate(top_buns, start=1):
        bun = await escape_markdown(item["bun"])  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –±—É–ª–æ—á–∫—É
        users = [
            await escape_markdown(user) for user in item["users"]
        ]  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
        stats_text += f"{i}\\ {bun} \\- {'\\, '.join(users)} üî•\n"
        print(stats_text)
    await message.reply(stats_text, parse_mode="MarkdownV2")


@in_game_r.message(Command(commands="stats_me"))
async def stats_me_handler(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∏—á–Ω—ã–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É–ª–æ—á–∫–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_buns = await get_user_buns_stats(user_id=user_id, chat_id=chat_id)

    if not user_buns:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –±—É–ª–æ—á–µ–∫ –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ üìä")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats_text = f"**üßÅ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\:**\n\n"
    for i, item in enumerate(user_buns, start=1):
        bun = item["bun"]
        count = item["count"]
        stats_text += f"{i}\\ {bun} \\- {count} —Ä–∞–∑\\(–∞\\) üî•\n"

    await message.reply(stats_text, parse_mode="Markdown")
