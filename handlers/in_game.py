import random
from aiogram import types, Router
from aiogram.filters import Command, ChatMemberUpdatedFilter, LEFT

from buns_data import IN_GAME_TEXT
from database.queries import (
    get_user_by_id,
    add_user_to_game,
    add_user,
    get_user_buns_stats,
    get_top_users_by_points,
    set_user_out_of_game,
)

in_game_r = Router()


def pluralize_times(count: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '—Ä–∞–∑' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞."""
    if count % 10 == 1 and count % 100 != 11:
        return f"{count} —Ä–∞–∑"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return f"{count} —Ä–∞–∑–∞"
    else:
        return f"{count} —Ä–∞–∑"


def pluralize_points(points: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–æ—á–∫–æ' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞."""
    if points % 10 == 1 and points % 100 != 11:
        return f"{points} –æ—á–∫–æ"
    elif points % 10 in [2, 3, 4] and points % 100 not in [12, 13, 14]:
        return f"{points} –æ—á–∫–∞"
    else:
        return f"{points} –æ—á–∫–æ–≤"


@in_game_r.message(Command(commands="play"))
async def in_game_handler(message: types.Message):
    from_user = message.from_user
    chat_id = message.chat.id
    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return
    if not from_user:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return
    user_id = from_user.id
    user = await get_user_by_id(user_id, chat_id)
    if user:
        if user.in_game:
            await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ! üéÆ")
        else:
            await add_user_to_game(user_id, chat_id)
            text = random.choice(IN_GAME_TEXT).format(
                user=(
                    f"@{from_user.username}"
                    if from_user.username
                    else from_user.full_name
                )
            )
            await message.reply(text)
    else:
        await add_user(
            telegram_id=user_id,
            username=from_user.username,
            full_name=from_user.full_name,
            chat_id=chat_id,
        )
        text = random.choice(IN_GAME_TEXT).format(
            user=f"{from_user.username}" if from_user.username else from_user.full_name
        )
        await message.reply(text)


@in_game_r.message(Command(commands="stats_me"))
async def stats_me_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return
    user_buns = await get_user_buns_stats(telegram_id=user_id, chat_id=chat_id)
    if not user_buns:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –±—É–ª–æ—á–µ–∫ –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ üìä")
        return
    username = message.from_user.username or message.from_user.full_name
    stats_text = f"<b>üßÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{username}:</b>\n\n"
    total_points = 0
    for i, item in enumerate(user_buns, start=1):
        bun = item["bun"]
        count = item["count"]
        points = item["points"]
        times_text = pluralize_times(count)
        points_text = pluralize_points(points)
        stats_text += f"{i}. {bun} - {times_text} ({points_text}) üî•\n"
        total_points += points
    total_points_text = pluralize_points(total_points)
    stats_text += f"\n<b>–í—Å–µ–≥–æ:</b> {total_points_text}"
    await message.reply(stats_text, parse_mode="HTML")


@in_game_r.message(Command(commands="stats"))
async def statistic_handler(message: types.Message):
    chat_id = message.chat.id
    if message.chat.type == "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return

    top_users = await get_top_users_by_points(chat_id=chat_id)
    if not top_users:
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –±—É–ª–æ—á–∫–∞–º–∏!")
        return

    stats_text = "<b>üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º:</b>\n\n"
    for i, user in enumerate(top_users, start=1):
        display_name = f"@{user['username']}" if user["username"] else user["full_name"]
        times_text = pluralize_times(user["count"])
        stats_text += f"{i}. {display_name} - {user['bun']} ({times_text})\n"
    await message.reply(stats_text, parse_mode="HTML")


@in_game_r.chat_member(ChatMemberUpdatedFilter(member_status_changed=LEFT))
async def on_user_left_chat(update: types.ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞."""
    user_id = update.from_user.id
    chat_id = update.chat.id
    if update.chat.type == "private":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å in_game=False
    changed = await set_user_out_of_game(telegram_id=user_id, chat_id=chat_id)
    if changed:
        display_name = (
            f"@{update.from_user.username}"
            if update.from_user.username
            else update.from_user.full_name
        )
        await update.bot.send_message(
            chat_id,
            f"{display_name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –±—É–ª–æ—á–µ–∫!",
            parse_mode="HTML",
        )
