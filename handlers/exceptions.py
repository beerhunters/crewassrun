import logging
import os
import traceback
from datetime import datetime
from typing import Optional

from aiogram import Router, Bot
from aiogram.handlers import ErrorHandler
from aiogram.types import Update
from dotenv import load_dotenv

load_dotenv()

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists("logs"):
    os.makedirs("logs")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | [%(filename)s:%(lineno)d] - %(message)s",
    level=logging.ERROR,
    filename="logs/bot_errors.log",
    encoding="utf-8",
)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
formatter = logging.Formatter(
    "%(asctime)s | %(levelname)s | [%(filename)s:%(lineno)d] - %(message)s"
)
console_handler.setFormatter(formatter)
logging.getLogger().addHandler(console_handler)

logger = logging.getLogger(__name__)

error_router = Router()


class ErrorInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"""

    def __init__(self, exception: Exception, update: Optional[Update] = None):
        self.exception = exception
        self.exception_name = type(exception).__name__
        self.exception_message = str(exception)
        self.error_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.update = update
        self.traceback_info = traceback.format_exc()
        self.traceback_snippet = self._format_traceback()
        self.error_location = self._get_error_location()

    def _get_error_location(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏"""
        if not hasattr(self.exception, "__traceback__"):
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"

        tb = traceback.extract_tb(self.exception.__traceback__)
        if not tb:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"

        last_call = tb[-1]
        filename = last_call.filename
        line = last_call.lineno
        func = last_call.name
        code_line = last_call.line.strip() if last_call.line else "???"
        return (
            f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
            f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
            f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
            f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
        )

    def _format_traceback(self, max_length: int = 2000) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π—Å–±–µ–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
        tb_lines = self.traceback_info.splitlines()
        snippet = (
            "\n".join(tb_lines[-4:]) if len(tb_lines) >= 4 else self.traceback_info
        )
        if len(snippet) > max_length:
            return snippet[:max_length] + "\n...[—Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
        return snippet

    def get_user_info(self) -> tuple[Optional[int], Optional[str], Optional[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.update:
            return None, None, None
        if hasattr(self.update, "message") and self.update.message:
            return (
                self.update.message.from_user.id,
                self.update.message.from_user.full_name,
                self.update.message.text,
            )
        elif hasattr(self.update, "callback_query") and self.update.callback_query:
            return (
                self.update.callback_query.from_user.id,
                self.update.callback_query.from_user.full_name,
                self.update.callback_query.data,
            )
        return None, None, None


@error_router.errors()
class MyHandler(ErrorHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ"""

    async def handle(self) -> None:
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤—ã–∑–≤–∞–Ω")

        exception = getattr(self.event, "exception", None)
        update = getattr(self.event, "update", None)

        if not exception:
            logger.error("–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: %s", self.event)
            return

        error_info = ErrorInfo(exception, update)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(
            "–û—à–∏–±–∫–∞ %s: %s\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\nTraceback: %s",
            error_info.exception_name,
            error_info.exception_message,
            error_info.error_location.replace("\n", " | "),
            error_info.traceback_snippet,
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._handle_notifications(error_info)

    async def _handle_notifications(self, error_info: ErrorInfo) -> None:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–µ"""

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await self._notify_user(error_info.update)
        except Exception as e:
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s\n%s",
                str(e),
                traceback.format_exc(),
            )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            await self._notify_admins(error_info)
        except Exception as e:
            logger.error(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: %s\n%s",
                str(e),
                traceback.format_exc(),
            )

    async def _notify_user(self, update: Optional[Update]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not update:
            logger.warning("–ù–µ—Ç update –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_message = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–ø–∏—Å–∞–≤, —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞! üòä"
        )

        try:
            if update.message:
                await update.message.answer(user_message)
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Message)")
            elif update.callback_query and update.callback_query.message:
                await update.callback_query.message.answer(user_message)
                logger.info(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (CallbackQuery)"
                )
            else:
                logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: %s", type(update))
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", str(e))

    async def _notify_admins(self, error_info: ErrorInfo) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        user_id, user_name, user_message = error_info.get_user_info()

        admin_message = (
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_info.error_time}\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üÜî <b>ID:</b> {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {user_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_info.exception_name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_info.exception_message}\n\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{error_info.error_location}\n\n"
            f"üìö <b>–¢—Ä–µ–π—Å–±–µ–∫:</b>\n<pre>{error_info.traceback_snippet}</pre>"
        )

        bot: Bot = self.bot
        FOR_LOGS = os.getenv("FOR_LOGS")
        try:
            await bot.send_message(
                FOR_LOGS,
                admin_message,
                parse_mode="HTML",
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %s", FOR_LOGS)
        except Exception as e:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É %s: %s",
                FOR_LOGS,
                str(e),
            )
