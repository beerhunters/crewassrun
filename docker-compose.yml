#version: '3.8'
#
#services:
#  telegram-bot:
#    build:
#      context: .
#      dockerfile: Dockerfile.bot
#    container_name: telegram_bot
#    volumes:
#      - ./db.sqlite3:/app/db.sqlite3
#      - ./logs:/app/logs
#      - ./.env:/app/.env
#    environment:
#      - PYTHONPATH=/app
#    depends_on:
#      - api
#    restart: unless-stopped
#
#  api:
#    build:
#      context: .
#      dockerfile: api/Dockerfile.api
#    container_name: api
#    volumes:
#      - ./db.sqlite3:/app/db.sqlite3
#      - ./logs:/app/logs
#    environment:
#      - PYTHONPATH=/app
#    restart: unless-stopped
#
#  admin:
#    build:
#      context: .
#      dockerfile: admin/Dockerfile.admin
#    container_name: admin
#    volumes:
#      - ./db.sqlite3:/app/db.sqlite3
#      - ./logs:/app/logs
#      - ./.env:/app/.env
#    environment:
#      - PYTHONPATH=/app
#      - FLASK_ENV=production
#    depends_on:
#      - api
#    restart: unless-stopped
#
#  nginx:
#    build:
#      context: .
#      dockerfile: Dockerfile.nginx
#    container_name: nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - api
#      - admin
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#    restart: unless-stopped
#
#volumes:
#  db_data:
#  logs:
version: '3.8'

services:
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: telegram_bot
    volumes:
      - ./db.sqlite3:/app/db.sqlite3
      - ./logs:/app/logs
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'  # 0.5 CPU
          memory: 256M  # 256 MiB памяти

  api:
    build:
      context: .
      dockerfile: api/Dockerfile.api
    container_name: api
    volumes:
      - ./db.sqlite3:/app/db.sqlite3
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  admin:
    build:
      context: .
      dockerfile: admin/Dockerfile.admin
    container_name: admin
    volumes:
      - ./db.sqlite3:/app/db.sqlite3
      - ./logs:/app/logs
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=production
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - admin
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  db_data:
  logs: